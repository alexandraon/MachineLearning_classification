import numpy as np
from scipy import stats

# Data
data = [0.8090985474036322, 0.830237915907313, 0.8182787696076123, 0.8734017272358431, 
        0.8307536011320704, 0.8144300368629945, 0.8174638106416275, 0.848495646000766, 
        0.8220314253647588, 0.8318671666497753, 0.8517164705689296, 0.8652152641878669, 
        0.8207274804048997, 0.842812108100532, 0.8280415537960809, 0.8115123163790113, 
        0.8272560964454932, 0.851309482742523, 0.8725401092336577, 0.85170787196961, 
        0.8047492004512948, 0.8214387481565447, 0.8494735393057686, 0.8637043938080389, 
        0.8040458923116386, 0.8397037929330368, 0.8614776013096908, 0.8163968148272298, 
        0.8540897193246805, 0.8410261961463522, 0.8398333632873886, 0.7925132752982621, 
        0.8432576613661545, 0.8551553992829537, 0.8629156857871162, 0.8233685905274313, 
        0.8534618834232778, 0.8331655697509356, 0.8654035543922376, 0.83317738791423, 
        0.8425912840546986, 0.8266985368680283, 0.8438350188057533, 0.8861302681992337, 
        0.8379520643899016, 0.8317418213969937, 0.8685585216759583, 0.838442259494891, 
        0.8259952914805934, 0.836129723934602, 0.8229012522855806, 0.8407808241141574, 
        0.8779096072147707, 0.8333748125774495, 0.839368835086003, 0.8561583639729388, 
        0.8714060565124395, 0.8235987549935054, 0.8573584818436076, 0.7917195405391267, 
        0.8609777222404041, 0.8692677975494189, 0.8231326488371143, 0.8574860099250343, 
        0.8528956946867394, 0.8631276467029644, 0.8893547752689543, 0.8604112200230548, 
        0.8171028515275025, 0.8509052783414036, 0.8411605587917794, 0.8399773883763778, 
        0.837636165577342, 0.8438351771685104, 0.790802764486975, 0.8410864975923196, 
        0.856299375306076, 0.8386054173530454, 0.8229646457340265, 0.8639852304558188, 
        0.8272688356164384, 0.8403589423926029, 0.8487117436585522, 0.8346737053258794, 
        0.8698009506833037, 0.8409006452484714, 0.8168901938274472, 0.8256804878574081, 
        0.8040500046548433, 0.8281264609731235, 0.8493733532720928, 0.8550366134107964, 
        0.8051530351903485, 0.8623206271982378, 0.8358434863864371, 0.8758209561383152, 
        0.8435983736003031, 0.8203856136447906, 0.8053954086105467, 0.8235188179379994]

# Sample size and alpha
n = len(data)
alpha = 0.05

# Sample mean and standard deviation
mean = np.mean(data)
std_dev = np.std(data, ddof=1)

# t-critical value for alpha/2 and n-1 degrees of freedom
t_critical = stats.t.ppf(1 - alpha/2, n-1)

# Margin of error
margin_error = t_critical * (std_dev / np.sqrt(n))

# Confidence interval
lower_bound = mean - margin_error
upper_bound = mean + margin_error

print(mean, std_dev, t_critical, margin_error, (lower_bound, upper_bound))
Se= np.sqrt(mean*(1-mean)/n)

print(np.percentile(data, 2.5), np.percentile(data, 97.5))  

print(stats.norm.interval(0.95, mean, Se))
n_test_samples = len(data)

z_score = stats.norm.ppf(0.975)  

std_error = np.sqrt((mean * (1 - mean)) / n_test_samples)

lower_bound = mean - z_score * std_error
upper_bound = mean + z_score * std_error

print(lower_bound, upper_bound)


